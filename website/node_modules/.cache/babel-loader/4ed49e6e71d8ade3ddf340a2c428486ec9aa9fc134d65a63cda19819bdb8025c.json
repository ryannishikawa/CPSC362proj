{"ast":null,"code":"var _jsxFileName = \"/home/ryannishikawa/CPSC362proj/website/src/pages/todo-list.js\",\n  _s = $RefreshSig$();\n//****************************************************************************************************************************\n//Program name: \"todo-list.jsx\".  This program is the main part of our web app. Copyright (C)  *\n//2024 Kyle Ho                                                                                                        *\n//This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *\n//version 3 as published by the Free Software Foundation.                                                                    *\n//This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *\n//warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *\n//A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *\n//****************************************************************************************************************************\n\n//=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**\n//\n//Author information\n//  Author names: Kyle Ho,\n//  Author emails: kyleho@csu.fullerton.edu,\n//  Course ID: CPSC362\n//\n//Program information\n//  Program name: Task manager\n//  Date of last update: February 19, 2024\n//  Programming language(s): JavaScript, HTML, CSS\n//  Files in this program: App.js, login.js, register.js, home.js, etc...\n//\n//  OS of the computer where the program was developed: Windows running WSL with Ubuntu 22.04.3 LTS\n//  OS of the computer where the program was tested: Windows running WSL Ubuntu 22.04.3 LTS\n//  Status: WIP\n//\n//References for this program\n//  https://www.youtube.com/watch?v=psU13XU1gDY&list=LL&index=3&t=796s&ab_channel=CodeWithViju\n//  https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\n//\n//Purpose\n//  The main page for viewing tasks\n//\n//This file\n//   File name: todo-list.jsx\n//   Date of last update: February 19, 2024\n//   Languages: JavaScript, HTML, CSS\n//\n//References for this file\n//   https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\n//\n//=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2**\n//\n//\n//\n//\n//===== Begin code area ================================================================================================\n\nimport { useEffect, useState } from \"react\";\nimport TaskList from \"../components/TaskList\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToDoListPage() {\n  _s();\n  const [tasks, setTasks] = useState([]); // Set initial state blank\n  const [loading, isLoading] = useState(true); // Set loading state for database queries to true\n\n  /**\n   * This effect handles pulling database information before the page is loaded.\n   */\n  useEffect(() => {\n    // Fetch data from the database\n    const fetchData = async () => {\n      try {\n        const uid = localStorage.getItem(\"userid\");\n        const response = await axios.post('http://localhost:5000/api/tasks/find', {\n          uid\n        });\n        console.log(`POST to database with status ` + response.status);\n        if (response.status === 200) {\n          let taskObject = response.data.taskObject;\n\n          // Map database response to object property names in TaskList.jsx\n          let mappedTaskObj = taskObject.map(task => ({\n            id: task.tid.toString(),\n            name: task.description,\n            completed: JSON.parse(task.completed.toLowerCase()),\n            status: \"none\" // The status must be 'none' (no action on this record), 'updated' (updated value on this record),\n          })); // OR 'deleted' (this record was deleted). Otherwise, the database will not accept this record.\n\n          setTasks(mappedTaskObj);\n          localStorage.setItem(\"usertasks\", JSON.stringify(tasks)); // Store the pulled tasks locally for modification.\n\n          isLoading(false);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchData();\n\n    // Add event listener and cleanup for when user leaves the page.\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty dependency array intentional, do not remove as this effect must run only once.\n\n  /**\n   * This effect saves tasks to the database when a user leaves the page (by navigation or closing window)\n   */\n  useEffect(() => {\n    return async () => {\n      // Save tasks\n      try {\n        const uid = localStorage.getItem(\"userid\");\n        const taskObject = JSON.parse(localStorage.getItem(\"usertasks\"));\n        const response = await axios.post('http://localhost:5000/api/tasks/update', {\n          uid,\n          taskObject\n        });\n        console.log('POST to database with status ' + JSON.stringify(response.data));\n        localStorage.removeItem(\"usertasks\");\n      } catch (err) {\n        console.log(err);\n      }\n    };\n  }, [tasks]);\n\n  /**\n   * Prompts user if they really want to leave.\n   */\n  const handleBeforeUnload = event => {\n    event.preventDefault();\n    event.returnValue = '';\n  };\n\n  // Wait until the task list is retrieved from the database.\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(TaskList, {\n    tasks: tasks\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoListPage, \"B3vEgtbv0tn4N6OxPXH1SpwT+ds=\");\n_c = ToDoListPage;\nexport default ToDoListPage;\nvar _c;\n$RefreshReg$(_c, \"ToDoListPage\");","map":{"version":3,"names":["useEffect","useState","TaskList","axios","jsxDEV","_jsxDEV","ToDoListPage","_s","tasks","setTasks","loading","isLoading","fetchData","uid","localStorage","getItem","response","post","console","log","status","taskObject","data","mappedTaskObj","map","task","id","tid","toString","name","description","completed","JSON","parse","toLowerCase","setItem","stringify","err","window","addEventListener","handleBeforeUnload","removeEventListener","removeItem","event","preventDefault","returnValue","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ryannishikawa/CPSC362proj/website/src/pages/todo-list.js"],"sourcesContent":["//****************************************************************************************************************************\n//Program name: \"todo-list.jsx\".  This program is the main part of our web app. Copyright (C)  *\n//2024 Kyle Ho                                                                                                        *\n//This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *\n//version 3 as published by the Free Software Foundation.                                                                    *\n//This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *\n//warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *\n//A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *\n//****************************************************************************************************************************\n\n\n//=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**\n//\n//Author information\n//  Author names: Kyle Ho,\n//  Author emails: kyleho@csu.fullerton.edu,\n//  Course ID: CPSC362\n//\n//Program information\n//  Program name: Task manager\n//  Date of last update: February 19, 2024\n//  Programming language(s): JavaScript, HTML, CSS\n//  Files in this program: App.js, login.js, register.js, home.js, etc...\n//\n//  OS of the computer where the program was developed: Windows running WSL with Ubuntu 22.04.3 LTS\n//  OS of the computer where the program was tested: Windows running WSL Ubuntu 22.04.3 LTS\n//  Status: WIP\n//\n//References for this program\n//  https://www.youtube.com/watch?v=psU13XU1gDY&list=LL&index=3&t=796s&ab_channel=CodeWithViju\n//  https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\n//\n//Purpose\n//  The main page for viewing tasks\n//\n//This file\n//   File name: todo-list.jsx\n//   Date of last update: February 19, 2024\n//   Languages: JavaScript, HTML, CSS\n//\n//References for this file\n//   https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started\n//\n//=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2**\n//\n//\n//\n//\n//===== Begin code area ================================================================================================\n\nimport { useEffect, useState } from \"react\";\nimport TaskList from \"../components/TaskList\";\nimport axios from \"axios\";\n\nfunction ToDoListPage() {\n  const [tasks, setTasks] = useState([]);                         // Set initial state blank\n  const [loading, isLoading] = useState(true);                    // Set loading state for database queries to true\n\n  /**\n   * This effect handles pulling database information before the page is loaded.\n   */\n  useEffect(() => {\n\n    // Fetch data from the database\n    const fetchData = async () => {\n      \n      try {\n        const uid = localStorage.getItem(\"userid\");\n        const response = await axios.post('http://localhost:5000/api/tasks/find', {uid});\n\n        console.log(`POST to database with status ` + response.status);\n        if(response.status === 200) {\n          let taskObject = response.data.taskObject;\n      \n          // Map database response to object property names in TaskList.jsx\n          let mappedTaskObj = taskObject.map(task => ({\n            id: task.tid.toString(),\n            name: task.description,\n            completed: JSON.parse(task.completed.toLowerCase()),\n            status: \"none\"        // The status must be 'none' (no action on this record), 'updated' (updated value on this record),\n          }));                    // OR 'deleted' (this record was deleted). Otherwise, the database will not accept this record.\n\n          setTasks(mappedTaskObj);\n          localStorage.setItem(\"usertasks\", JSON.stringify(tasks));   // Store the pulled tasks locally for modification.\n\n          isLoading(false);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData();\n\n    // Add event listener and cleanup for when user leaves the page.\n    window.addEventListener(\"beforeunload\", handleBeforeUnload);\n    return () => {\n      window.removeEventListener(\"beforeunload\", handleBeforeUnload);\n    };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);   // Empty dependency array intentional, do not remove as this effect must run only once.\n\n  /**\n   * This effect saves tasks to the database when a user leaves the page (by navigation or closing window)\n   */\n  useEffect(() => {\n    return async () => {\n\n      // Save tasks\n      try {\n        const uid = localStorage.getItem(\"userid\");\n        const taskObject = JSON.parse(localStorage.getItem(\"usertasks\"));\n\n        const response = await axios.post('http://localhost:5000/api/tasks/update', { uid, taskObject });\n        console.log('POST to database with status ' + JSON.stringify(response.data));\n\n        localStorage.removeItem(\"usertasks\");\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, [tasks]);\n\n  /**\n   * Prompts user if they really want to leave.\n   */\n  const handleBeforeUnload = (event) => {\n    event.preventDefault();\n    event.returnValue = '';\n  };\n\n  // Wait until the task list is retrieved from the database.\n  if(loading) {\n     return <div>Loading...</div>;\n  }\n\n  return (\n    <TaskList tasks={tasks} />\n  );\n}\n\nexport default ToDoListPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}